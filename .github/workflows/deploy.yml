name: Deploy to Bunny.net

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm run install-all
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Prepare deployment files
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy backend files
        cp -r backend/* deployment/
        
        # Copy built frontend
        cp -r frontend/build deployment/public
        
        # Copy package.json and other necessary files
        cp package.json deployment/
        cp -r .env* deployment/ 2>/dev/null || true
        
        # Create a simple server.js for bunny.net
        cat > deployment/server.js << 'EOF'
        const express = require('express');
        const path = require('path');
        const cors = require('cors');
        const helmet = require('helmet');
        const rateLimit = require('express-rate-limit');
        
        const app = express();
        const PORT = process.env.PORT || 3000;
        
        // Middleware
        app.use(cors());
        app.use(helmet());
        app.use(express.json({ limit: '10mb' }));
        app.use(express.urlencoded({ extended: true, limit: '10mb' }));
        
        // Rate limiting
        const limiter = rateLimit({
          windowMs: 15 * 60 * 1000, // 15 minutes
          max: 100 // limit each IP to 100 requests per windowMs
        });
        app.use(limiter);
        
        // Serve static files from React build
        app.use(express.static(path.join(__dirname, 'public')));
        
        // API routes
        app.use('/api/auth', require('./routes/auth'));
        app.use('/api/transactions', require('./routes/transactions'));
        app.use('/api/receipts', require('./routes/receipts'));
        app.use('/api/matches', require('./routes/matches'));
        app.use('/api/analytics', require('./routes/analytics'));
        app.use('/api/exports', require('./routes/exports'));
        app.use('/api/settings', require('./routes/settings'));
        app.use('/api/companies', require('./routes/companies'));
        app.use('/api/masterdata', require('./routes/masterdata'));
        app.use('/api/ai', require('./routes/ai'));
        
        // Handle React routing, return all requests to React app
        app.get('*', (req, res) => {
          res.sendFile(path.join(__dirname, 'public', 'index.html'));
        });
        
        app.listen(PORT, () => {
          console.log(\`Server is running on port \${PORT}\`);
        });
        EOF
        
    - name: Create package.json for deployment
      run: |
        cat > deployment/package.json << 'EOF'
        {
          "name": "expense-matcher-deployment",
          "version": "1.0.0",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "archiver": "^7.0.1",
            "axios": "^1.11.0",
            "bcryptjs": "^3.0.2",
            "cors": "^2.8.5",
            "csv-parser": "^3.0.0",
            "dotenv": "^17.2.1",
            "exceljs": "^4.4.0",
            "express": "^4.18.2",
            "express-rate-limit": "^8.0.1",
            "helmet": "^8.1.0",
            "jsonwebtoken": "^9.0.2",
            "moment": "^2.30.1",
            "multer": "^1.4.5-lts.1",
            "pdf-lib": "^1.17.1",
            "pdf-parse": "^1.1.1",
            "pdf-poppler": "^0.2.1",
            "pdfkit": "^0.17.1",
            "sqlite3": "^5.1.6",
            "tesseract.js": "^5.0.4",
            "uuid": "^9.0.1"
          }
        }
        EOF
        
    - name: Install deployment dependencies
      run: |
        cd deployment
        npm install --production
        
    - name: Upload deployment files
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/
        
    - name: Deploy Script to Bunny Edge Scripting
      uses: BunnyWay/actions/deploy-script@main
      with:
        script_id: 41397
        file: "script.ts"
        api_key: ${{ secrets.BUNNY_API_KEY }}

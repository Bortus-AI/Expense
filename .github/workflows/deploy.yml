name: Deploy to Bunny.net

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Prepare deployment files
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy backend files
        cp -r backend/* deployment/
        
        # Copy built frontend as public directory
        cp -r frontend/build deployment/public
        
        # Copy package.json and other necessary files
        cp package.json deployment/
        cp -r .env* deployment/ 2>/dev/null || true
        
        # Modify the existing backend server.js to serve frontend static files
        cat >> deployment/server.js << 'EOF'
        
        // Additional configuration for serving frontend static files in production
        const path = require('path');
        
        // Serve static files from React build (insert before catch-all route)
        app.use(express.static(path.join(__dirname, 'public'), {
          maxAge: '1h',
          etag: false
        }));
        
        // Health check endpoint
        app.get('/health', (req, res) => {
          res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
        });
        
        // Handle React routing - catch-all route for frontend (this should be the last route)
        app.get('*', (req, res, next) => {
          // Don't handle API routes or file extensions
          if (req.path.startsWith('/api/') || req.path.includes('.')) {
            return next();
          }
          
          const indexPath = path.join(__dirname, 'public', 'index.html');
          
          // Check if index.html exists before serving
          if (require('fs').existsSync(indexPath)) {
            res.sendFile(indexPath);
          } else {
            res.status(404).send('Frontend application not found');
          }
        });
        EOF
        
    - name: Create package.json for deployment
      run: |
        cat > deployment/package.json << 'EOF'
        {
          "name": "expense-matcher-deployment",
          "version": "1.0.0",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "archiver": "^7.0.1",
            "axios": "^1.11.0",
            "bcryptjs": "^3.0.2",
            "cors": "^2.8.5",
            "csv-parser": "^3.0.0",
            "dotenv": "^17.2.1",
            "exceljs": "^4.4.0",
            "express": "^4.18.2",
            "express-rate-limit": "^8.0.1",
            "helmet": "^8.1.0",
            "jsonwebtoken": "^9.0.2",
            "moment": "^2.30.1",
            "multer": "^1.4.5-lts.1",
            "pdf-lib": "^1.17.1",
            "pdf-parse": "^1.1.1",
            "pdf-poppler": "^0.2.1",
            "pdfkit": "^0.17.1",
            "sqlite3": "^5.1.6",
            "tesseract.js": "^5.0.4",
            "uuid": "^9.0.1"
          }
        }
        EOF
        
    - name: Install deployment dependencies
      run: |
        cd deployment
        npm install --production
        
    - name: Upload deployment files
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/
        
    - name: Deploy Script to Bunny Edge Scripting
      uses: BunnyWay/actions/deploy-script@main
      with:
        script_id: 41397
        file: "script.ts"
        api_key: ${{ secrets.BUNNY_API_KEY }}
